(function(e) {
    var t = function(e, t) {
        const a = (e, t, n) => {
            const o = document.createElementNS("http://www.w3.org/2000/svg", "svg"),
                s = document.createElementNS("http://www.w3.org/2000/svg", "rect");
            return o.setAttributeNS("http://www.w3.org/2000/svg", "viewBox", `0 0 ${e} ${t}`), s.setAttribute("x", "0"), s.setAttribute("y", "0"), s.setAttribute("width", "100%"), s.setAttribute("height", "100%"), s.setAttribute("rx", `${n}`), s.setAttribute("ry", `${n}`), s.setAttribute("pathLength", "10"), o.appendChild(s), o
        };
        document.querySelectorAll(".btn-border-running").forEach(e => {
            if (!e.querySelector(".lines")) {
                const i = getComputedStyle(e),
                    o = document.createElement("div");
                o.classList.add("lines");
                const n = document.createElement("div"),
                    s = document.createElement("div"),
                    t = a(e.offsetWidth, e.offsetHeight, parseInt(i.borderRadius, 10));
                n.appendChild(t), n.appendChild(t.cloneNode(!0)), n.appendChild(t.cloneNode(!0)), n.appendChild(t.cloneNode(!0)), s.appendChild(t.cloneNode(!0)), s.appendChild(t.cloneNode(!0)), s.appendChild(t.cloneNode(!0)), s.appendChild(t.cloneNode(!0)), o.appendChild(n), o.appendChild(s), e.appendChild(o), e.addEventListener("pointerenter", () => {
                    e.classList.add("start")
                }), t.addEventListener("animationend", () => {
                    e.classList.remove("start")
                })
            }
        });

        function s() {
            if (e.find(".pxl-elementor-bg-parallax").length) {
                var o = e,
                    i = 0,
                    a = 0,
                    n = 0,
                    s = 0,
                    r = 1 / 30;

                function c() {
                    n += (i - n) * r, s += (a - s) * r, translate = "translate(" + n + "px, " + s + "px) scale(1.1)", o.find(".pxl-elementor-bg-parallax .parallax-element").css({
                        "-webit-transform": translate,
                        "-moz-transform": translate,
                        transform: translate
                    }), window.requestAnimationFrame(c)
                }
                o.on("mousemove", function(e) {
                    var n = t(this),
                        s = Math.max(-100, Math.min(100, n.width() / 2 - e.clientX)),
                        o = Math.max(-100, Math.min(100, n.height() / 2 - e.clientY));
                    i = 20 * s / 100, a = 10 * o / 100
                }), c()
            }
        }
        s();

        function r(e) {
            var n, o, i, a, r, c = t(window).width(),
                s = (t("#pxl-main").width() - 1300) / 2;
            c > 1200 && (n = t("body").hasClass("rtl"), o = n ? ".col-offset-right" : ".pxl-section-offset-left", i = n ? ".col-offset-left" : ".pxl-section-offset-right", a = e.find(o + ".elementor-column > .elementor-widget-wrap"), r = e.find(i + ".elementor-column > .elementor-widget-wrap"), a.css(n ? "padding-right" : "padding-left", s + "px"), r.css(n ? "padding-left" : "padding-right", s + "px"))
        }
        if (r(e), !e.find(".pxl-elementor-grid-ani").length && e.hasClass("pxl-section-grid-bg-yes") && e.prepend('<div class="pxl-elementor-grid-ani"><div class="grid-element"></div></div>'), e.find(".slide-draw-svg").length) {
            var i, c = e.find(".slide-draw-svg svg"),
                n = t(window).scrollTop(),
                o = n + t(window).height();
            c.each(function() {
                var e = t(this),
                    s = e.offset().top,
                    i = s + e.outerHeight(),
                    a = e.find("path");
                a.each(function() {
                    var a = t(this),
                        r = this.getTotalLength();
                    a.attr("stroke-dasharray", r), a.css("stroke-dashoffset", r), t(window).on("scroll", function() {
                        n = t(window).scrollTop(), o = n + t(window).height(), s = e.offset().top, i = s + e.outerHeight(), s < o && i > n ? (e.addClass("visible"), a.css("stroke-dashoffset", 0)) : (e.removeClass("visible"), a.css("stroke-dashoffset", r))
                    })
                })
            })
        }
        window.elementorFrontend.isEditMode() && (t("a, input, button, .pxl-transtion").on("mouseover", function() {
            t(this).addClass("pxl-hover-transition")
        }), t(".pxl-switch-button").on("mouseover", function() {
            t("a, input, button, .pxl-transtion").removeClass("pxl-hover-transition"), t(".pxl-scroll-top").removeClass("pxl-hover-transition")
        }), t(".pxl-parent-transition").each(function() {
            t(this).find(".pxl-transtion").addClass("pxl-hover-transition"), t(this).hover(function() {
                t(this).find(".pxl-transtion").addClass("pxl-hover-transition")
            }), t(".pxl-switch-button").on("mouseover", function() {
                t(this).find(".pxl-transtion").removeClass("pxl-hover-transition")
            })
        }), t(".pxl-hidden-panel-button, .pxl-anchor-icon.custom").each(function() {
            t(this).hover(function() {
                t(this).addClass("pxl-line-width"), setTimeout(function() {
                    t(".pxl-hidden-panel-button, .pxl-anchor-icon.custom").removeClass("pxl-line-width")
                }, 600)
            })
        }), t(".btn-default").each(function() {
            var n = 0,
                s = 0,
                e = t(this).find("svg path");
            t(this).mousemove(function(n) {
                var s = t(this).offset(),
                    o = n.pageX - s.left,
                    i = n.pageY - s.top,
                    r = o - t(this).width() / 2,
                    c = i - t(this).height() / 2,
                    a = "scale(" + (1 + (o + i) / (t(this).width() + t(this).height())) + ")";
                e.css("transform", a)
            }), t(this).mouseleave(function() {
                e.css("transform", "none")
            })
        }), t(".pxl-neon-glow").each(function(e) {
            var n, s, o, i, a, r = t(this).find("strong");
            r.each(function() {
                for (var n = t(this).text(), s = "", e = 0; e < n.length; e++) s += '<span class="highlight">' + n[e] + "</span>";
                t(this).html(s)
            }), n = t(this).css("color"), o = "pxl_neon_glows_" + e, s = "3px", i = "@keyframes " + o + " { 0% { color: " + n + "; text-shadow: 0 0 " + s + " " + n + "; } 100% { color: " + n + "; text-shadow: 0 0 " + s + " " + n + ", 0 0 " + s + " " + n + ", 0 0 " + s + " " + n + "; } }", a = t("<style>").text(i), t("head").append(a), t(this).find(".highlight").css("animation", o + " 1.5s ease-in-out infinite alternate")
        }), i = document.querySelectorAll(".pxl-wobble"), i.forEach(function(e) {
            e.addEventListener("mouseover", function() {
                if (!e.classList.contains("animating") && !e.classList.contains("mouseover")) {
                    e.classList.add("animating", "mouseover");
                    var t, s, n = e.innerText.split("");
                    setTimeout(function() {
                        e.classList.remove("animating")
                    }, (n.length + 1) * 50), t = e.dataset.animation, t || (t = "pxl-jump"), e.innerText = "", n.forEach(function(t) {
                        t == " " && (t = "&nbsp;"), e.innerHTML += '<span class="letter">' + t + "</span>"
                    }), s = e.querySelectorAll(".letter"), s.forEach(function(e, n) {
                        setTimeout(function() {
                            e.classList.add(t)
                        }, 50 * n)
                    })
                }
            }), e.addEventListener("mouseout", function() {
                e.classList.remove("mouseover")
            })
        }), e.hover(function() {
            !e.find(".pxl-grid-lines").length && e.hasClass("pxl-show-grid-yes") ? e.append('<div class="pxl-grid-lines"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></div>') : e.find(".pxl-grid-lines").length && e.hasClass("pxl-show-grid-none") && e.find(".pxl-grid-lines").remove(), e.find(".pxl-grid-lines").length && e.hasClass("pxl-grid-mobile-yes") ? e.find(".pxl-grid-lines").addClass("grid-mobile") : e.find(".pxl-grid-lines").length && e.hasClass("pxl-grid-mobile-none") && e.find(".pxl-grid-lines").removeClass("grid-mobile")
        }), t(window).on("scroll", function() {
            !e.find(".pxl-elementor-bg-scroll").length && e.hasClass("pxl-section-bg-scroll") && e.prepend(`<div class="pxl-elementor-bg-scroll"><div class="scroll-element" data-parallax='{"y": -20}'></div></div>`), !e.find(".pxl-elementor-bg-parallax").length && e.hasClass("pxl-section-bg-parallax") && (e.prepend('<div class="pxl-elementor-bg-parallax"><div class="parallax-element"></div></div>'), s()), !e.find(".pxl-elementor-grid-ani").length && e.hasClass("pxl-section-grid-bg-yes") && e.prepend('<div class="pxl-elementor-grid-ani"><div class="grid-element"></div></div>'), e.find(".pxl-elementor-grid-ani").length && !e.hasClass("pxl-section-grid-bg-yes") && e.find(".pxl-elementor-grid-ani").remove()
        }))
    };

    function n() {
        var e = typeof elementor != "undefined" ? elementor : elementorFrontend;
        e.hooks.addFilter("pxl_section_start_render", function(e, t) {
            return (typeof t.pxl_scroll_bg_img != "undefined" && t.pxl_scroll_bg_img.url != "" || typeof t.pxl_scroll_bg_img_dark != "undefined" && t.pxl_scroll_bg_img_dark.url != "") && (e += `<div class="pxl-elementor-bg-scroll"><div class="scroll-element" data-parallax='{"y": -20}'></div></div>`), (typeof t.pxl_parallax_bg_img != "undefined" && t.pxl_parallax_bg_img.url != "" || typeof t.pxl_parallax_bg_img_dark != "undefined" && t.pxl_parallax_bg_img_dark.url != "") && (e += '<div class="pxl-elementor-bg-parallax"><div class="parallax-element"></div></div>'), e
        })
    }

    function s() {
        if (e("#pxl-page-title-default .pxl-elementor-bg-parallax").length) {
            var s = e(".pxl-section-bg-parallax"),
                o = 0,
                i = 0,
                t = 0,
                n = 0,
                a = 1 / 30;

            function r() {
                t += (o - t) * a, n += (i - n) * a, translate1 = "translate(" + t + "px, " + n + "px) scale(1.1)", s.find(".pxl-elementor-bg-parallax .parallax-element").css({
                    "-webit-transform": translate1,
                    "-moz-transform": translate1,
                    transform: translate1
                }), window.requestAnimationFrame(r)
            }
            s.on("mousemove", function(t) {
                var n = e(this),
                    s = Math.max(-100, Math.min(100, n.width() / 2 - t.clientX)),
                    a = Math.max(-100, Math.min(100, n.height() / 2 - t.clientY));
                o = 20 * s / 100, i = 10 * a / 100
            }), r()
        }
    }

    function o() {
        var n = e(".pxl-tab-icon-box1");
        n.find(".pxl--item .pxl-tab--title").on("mouseenter click", function(t) {
            t.preventDefault();
            var s = e(this).data("target"),
                o = e(s),
                n = e(this).parents(".pxl-tab-icon-box-inner");
            n.find(".pxl-item--inner").removeClass("active wow skewIn"), n.find(".pxl--item .pxl-tab--title").removeClass("active"), e(this).addClass("active"), o.addClass("active wow skewIn")
        })
    }

    function i(e) {
        const t = e.find(".pxl-text--marquee"),
            n = gsap.utils.toArray(t),
            o = s(n, {
                paused: !1,
                repeat: -1
            });

        function s(e, t) {
            e = gsap.utils.toArray(e), t = t || {};
            let n = gsap.timeline({
                    repeat: t.repeat,
                    paused: t.paused,
                    defaults: {
                        ease: "none"
                    },
                    onReverseComplete: () => n.totalTime(n.rawTime() + n.duration() * 100)
                }),
                o = e.length,
                v = e[0].offsetLeft,
                p = [],
                r = [],
                l = [],
                i = 0,
                d = (t.speed || 1) * 100,
                m = t.snap === !1 ? e => e : gsap.utils.snap(t.snap || 1),
                f, c, h, a, u, s;
            gsap.set(e, {
                xPercent: (e, t) => {
                    let n = r[e] = parseFloat(gsap.getProperty(t, "width", "px"));
                    return l[e] = m(parseFloat(gsap.getProperty(t, "x", "px")) / n * 100 + gsap.getProperty(t, "xPercent")), l[e]
                }
            }), gsap.set(e, {
                x: 0
            }), f = e[o - 1].offsetLeft + l[o - 1] / 100 * r[o - 1] - v + e[o - 1].offsetWidth * gsap.getProperty(e[o - 1], "scaleX") + (parseFloat(t.paddingRight) || 0);
            for (s = 0; s < o; s++) u = e[s], c = l[s] / 100 * r[s], h = u.offsetLeft + c - v, a = h + r[s] * gsap.getProperty(u, "scaleX"), n.to(u, {
                xPercent: m((c - a) / r[s] * 100),
                duration: a / d
            }, 0).fromTo(u, {
                xPercent: m((c - a + f) / r[s] * 100)
            }, {
                xPercent: l[s],
                duration: (c - a + f - c) / d,
                immediateRender: !1
            }, a / d).add("label" + s, h / d), p[s] = h / d;

            function g(e, t) {
                t = t || {}, Math.abs(e - i) > o / 2 && (e += e > i ? -o : o);
                let a = gsap.utils.wrap(0, o, e),
                    s = p[a];
                return s > n.time() !== e > i && (t.modifiers = {
                    time: gsap.utils.wrap(0, n.duration())
                }, s += n.duration() * (e > i ? 1 : -1)), i = a, t.overwrite = !0, n.tweenTo(s, t)
            }
            return n.next = e => g(i + 1, e), n.previous = e => g(i - 1, e), n.current = () => i, n.toIndex = (e, t) => g(e, t), n.times = p, n.progress(1, !0).progress(0, !0), t.reversed && (n.vars.onReverseComplete(), n.reverse()), n
        }
    }

    function a() {
        const t = gsap.utils.toArray(".pxl-video-player .bg-image");
        t.forEach(e => {
            gsap.to(e, {
                y: "30%",
                scaleX: 1.3,
                scaleY: 1.3,
                ease: "none",
                scrollTrigger: {
                    trigger: e,
                    start: "center 80%",
                    end: "center 0%",
                    scrub: !0
                }
            })
        })
    }

    function r(e) {
        if (e.find("#pxl-triggerslider").length) {
            gsap.defaults({
                ease: "none",
                duration: 2
            });
            const e = gsap.timeline();
            e.from(".pxl-trigger-slide1", {
                yPercent: 0
            }).from(".pxl-trigger-slide2", {
                yPercent: 100
            }).from(".pxl-trigger-slide3", {
                yPercent: 100
            }).from(".pxl-trigger-slide4", {
                yPercent: 100
            }).from(".pxl-trigger-slide5", {
                yPercent: 100
            }).from(".pxl-trigger-slide6", {
                yPercent: 100
            }), ScrollTrigger.create({
                animation: e,
                trigger: "#pxl-triggerslider",
                start: "top top",
                end: "+=4000",
                scrub: !0,
                pin: !0,
                anticipatePin: 1
            })
        }
    }

    function c(t) {
        function n() {
            e(".pxl-menu-hidden, ul.sub-menu").each(function() {
                var t = e(this);
                t.hasClass("open") ? t.find(">li").each(function(t) {
                    e(this).attr("style", "--dsn-li-index: " + (t + 1) + ";")
                }) : t.find(">li").each(function() {
                    e(this).attr("style", "--dsn-li-index: 0;")
                })
            })
        }
        t.find(".pxl-menu-hidden").addClass("open"), t.find(".pxl-nav-hidden li.menu-item-has-children").each(function() {
            e(this).append('<span class="pxl-menu-hidden-toggle"></span>');
            var t = e(this).children("a").text();
            e(this).find(".sub-menu").prepend('<li class="submenu-title"><span class="text-name">' + t + '</span><span class="text-back pxl-wobble">Back</span></li>')
        });

        function s() {
            var t = e(this).closest("ul"),
                o = e(this).closest("li"),
                s = o.find(">.sub-menu");
            t.toggleClass("open"), t.hasClass("open") ? s.removeClass("open") : s.addClass("open"), n()
        }
        e("ul li").on("click", ".pxl-menu-hidden-toggle", s), e(document).on("click", ".submenu-title", function() {
            e(this).closest(".menu-item").find(">.pxl-menu-hidden-toggle").trigger("click")
        });

        function o() {
            var t = e(this).closest("li").find(">.sub-menu"),
                n = e(this).closest("li").children("a").text();
            t.length > 0 && (t.find(".pxl-menu-hidden-toggle").on("click", s), t.find(".submenu-title").on("click", o))
        }
        e(".pxl-menu-hidden li .pxl-menu-hidden-toggle").on("click", o), n()
    }
    e(window).on("elementor/frontend/init", function() {
        elementorFrontend.hooks.addAction("frontend/element_ready/global", t), n(), s(), elementorFrontend.hooks.addAction("frontend/element_ready/global", function(e) {
            o(e)
        }), elementorFrontend.hooks.addAction("frontend/element_ready/pxl_text_carousel.default", function(e) {
            i(e)
        }), elementorFrontend.hooks.addAction("frontend/element_ready/pxl_menu_hidden.default", function(e) {
            c(e)
        }), elementorFrontend.hooks.addAction("frontend/element_ready/pxl_gallery_carousel.default", function(e) {
            r(e)
        }), elementorFrontend.hooks.addAction("frontend/element_ready/pxl_video_player.default", function(e) {
            a(e)
        })
    })
})(jQuery)