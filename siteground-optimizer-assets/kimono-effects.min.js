(function(e) {
    var t = function(e, t) {
            t(".pxl-image-tilt").length && t(".pxl-image-tilt").each(function() {
                var e = t(this);
                VanillaTilt.init(e[0], {
                    max: 10,
                    speed: 1e3,
                    glare: !1,
                    "max-glare": .5,
                    perspective: 1400,
                    easing: "cubic-bezier(.03, .98, .52, .99)",
                    reset: !0
                })
            });
            const n = [...document.querySelectorAll(".pxl-image-ink")],
                s = new ScrollMagic.Controller;
            n.map(e => {
                const t = new ScrollMagic.Scene({
                    triggerElement: e,
                    triggerHook: "onEnter"
                }).setClassToggle(e, "is-active").reverse(!1).addTo(s)
            });
            const o = document.querySelectorAll(".pxl-image-scroller img"),
                i = new IntersectionObserver(e => {
                    e.forEach(e => {
                        e.isIntersecting ? (e.target.style.opacity = 1, e.target.style.filter = "grayscale(0)") : (e.target.style.opacity = 0, e.target.style.filter = "grayscale(1)")
                    })
                }, {
                    threshold: .15
                });
            o.forEach((e) => {
                i.observe(e)
            })
        },
        s = function(e, t) {
            if (e.find(".pxl-text-img-wrap").length <= 0) return;
            e.find(".pxl-text-img-wrap ul>li").on("mouseenter", function() {
                t(this).addClass("active").siblings().removeClass("active");
                var e = t(this).attr("data-target");
                t(this).closest(".pxl-item--inner").find(e).addClass("active").siblings().removeClass("active")
            }), e.find(".pxl-text-img-wrap ul>li").on("mouseleave", function() {
                t(this).removeClass("active");
                var e = t(this).attr("data-target");
                t(this).closest(".pxl-item--inner").find(e).removeClass("active")
            });
            const n = {
                    x: window.innerWidth / 2,
                    y: window.innerHeight / 2
                },
                s = gsap.quickSetter(e.find(".pxl-text-img-wrap .pxl-item--inner"), "css"),
                o = gsap.quickSetter(e.find(".pxl-text-img-wrap .pxl-item--inner"), "css")
        },
        o = function() {},
        n = function(e, t) {
            gsap.registerPlugin(SplitText, ScrollTrigger);
            var n = e.find(".pxl-split-text");
            if (n.each(function(e, n) {
                    n.split = new SplitText(n, {
                        type: "lines,words,chars",
                        linesClass: "split-line"
                    }), gsap.set(n, {
                        perspective: 400
                    }), t(n).hasClass("split-in-fade") && gsap.set(n.split.chars, {
                        opacity: 0,
                        ease: "Back.easeOut"
                    }), t(n).hasClass("split-in-right") && gsap.set(n.split.chars, {
                        opacity: 0,
                        x: "50",
                        ease: "Back.easeOut"
                    }), t(n).hasClass("split-in-left") && gsap.set(n.split.chars, {
                        opacity: 0,
                        x: "-50",
                        ease: "circ.out"
                    }), t(n).hasClass("split-in-up") && gsap.set(n.split.chars, {
                        opacity: 0,
                        y: "80",
                        ease: "circ.out"
                    }), t(n).hasClass("split-in-down") && gsap.set(n.split.chars, {
                        opacity: 0,
                        y: "-80",
                        ease: "circ.out"
                    }), t(n).hasClass("split-in-rotate") && gsap.set(n.split.chars, {
                        opacity: 0,
                        rotateX: "50deg",
                        ease: "circ.out"
                    }), t(n).hasClass("split-in-scale") && gsap.set(n.split.chars, {
                        opacity: 0,
                        scale: "0.5",
                        ease: "circ.out"
                    }), n.anim = gsap.to(n.split.chars, {
                        scrollTrigger: {
                            trigger: n,
                            toggleActions: "restart pause resume reverse",
                            start: "top 90%"
                        },
                        x: "0",
                        y: "0",
                        rotateX: "0",
                        scale: 1,
                        opacity: 1,
                        duration: .8,
                        stagger: .02
                    })
                }), t(window).width() >= 768 && t(".text-animation").length) {
                let e = t(".text-animation").toArray();
                e.forEach(e => {
                    if (!t(e).data("split")) {
                        const s = gsap.timeline({
                                scrollTrigger: {
                                    trigger: e,
                                    start: "top 80%",
                                    end: "bottom 40%",
                                    scrub: !1,
                                    markers: !1,
                                    toggleActions: "play none none play",
                                    once: !1
                                }
                            }),
                            n = new SplitText(e, {
                                type: "words, lines"
                            });
                        gsap.set(e, {
                            perspective: 400
                        }), n.split({
                            type: "lines"
                        }), s.from(n.lines, {
                            duration: .8,
                            delay: 0,
                            opacity: 0,
                            rotationX: -80,
                            force3D: !0,
                            transformOrigin: "top center -50",
                            stagger: .1
                        }), t(e).data("split", !0)
                    }
                })
            }
            const s = () => {
                document.body.style.overflow = "auto";
                var n = e.prev("section");
                gsap.utils.toArray(e.find(".element-scroll")).forEach((e) => {
                    const o = e;
                    var i = o.scrollWidth * -1,
                        a = 0;
                    t(e).closest(".pxl-section-scroll").hasClass("revesal") && (i = "100%", a = (o.scrollWidth + 50 - e.offsetWidth) * -1), gsap.fromTo(o, {
                        x: i
                    }, {
                        x: a,
                        scrollTrigger: {
                            trigger: n,
                            start: "top 10%",
                            end: "bottom 50%",
                            scrub: .5
                        }
                    })
                })
            };
            s()
        },
        i = function(e, t) {
            if (window.elementorFrontend.isEditMode()) {
                var n, s, o = `#ifdef GL_ES
            precision mediump float;
            #endif

            attribute vec3 aVertexPosition;
            attribute vec2 aTextureCoord;

            uniform mat4 uMVMatrix;
            uniform mat4 uPMatrix;

            uniform mat4 texture0Matrix;
            uniform mat4 texture1Matrix;
            uniform mat4 mapMatrix;

            varying vec3 vVertexPosition;
            varying vec2 vTextureCoord0;
            varying vec2 vTextureCoord1;
            varying vec2 vTextureCoordMap;

            void main() {
                vec3 vertexPosition = aVertexPosition;

                gl_Position = uPMatrix * uMVMatrix * vec4(vertexPosition, 1.0);

                vTextureCoord0 = (texture0Matrix * vec4(aTextureCoord, 0., 1.)).xy;
                vTextureCoord1 = (texture1Matrix * vec4(aTextureCoord, 0., 1.)).xy;
                vTextureCoordMap = (mapMatrix * vec4(aTextureCoord, 0., 1.)).xy;
                vVertexPosition = vertexPosition;
            }`,
                    i = `#ifdef GL_ES
            precision mediump float;
            #endif

            #define PI2 6.28318530718
            #define PI 3.14159265359
            #define S(a,b,n) smoothstep(a,b,n)

            uniform float uTime;
            uniform float uProgress;
            uniform vec2 uReso;
            uniform vec2 uMouse;

            varying vec3 vVertexPosition;
            varying vec2 vTextureCoord0;
            varying vec2 vTextureCoord1;
            varying vec2 vTextureCoordMap;

            uniform sampler2D texture0;
            uniform sampler2D texture1;
            uniform sampler2D map;

            float exponentialEasing (float x, float a){

                float epsilon = 0.00001;
                float min_param_a = 0.0 + epsilon;
                float max_param_a = 1.0 - epsilon;
                a = max(min_param_a, min(max_param_a, a));

                if (a < 0.5){
                    a = 2.0 * a;
                    float y = pow(x, a);
                    return y;
                } else {
                    a = 2.0 * (a-0.5);
                    float y = pow(x, 1.0 / (1.-a));
                    return y;
                }
            }

            vec4 blur13(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {
                vec4 color = vec4(0.0);
                vec2 off1 = vec2(1.411764705882353) * direction;
                vec2 off2 = vec2(3.2941176470588234) * direction;
                vec2 off3 = vec2(5.176470588235294) * direction;
                color += texture2D(image, uv) * 0.1964825501511404;
                color += texture2D(image, uv + (off1 / resolution)) * 0.2969069646728344;
                color += texture2D(image, uv - (off1 / resolution)) * 0.2969069646728344;
                color += texture2D(image, uv + (off2 / resolution)) * 0.09447039785044732;
                color += texture2D(image, uv - (off2 / resolution)) * 0.09447039785044732;
                color += texture2D(image, uv + (off3 / resolution)) * 0.010381362401148057;
                color += texture2D(image, uv - (off3 / resolution)) * 0.010381362401148057;
                return color;
            }

            void main(){
                vec2 uv0 = vTextureCoord0;
                vec2 uv1 = vTextureCoord1;

                float progress0 = uProgress;
                float progress1 = 1. - uProgress;

                vec4 map = blur13(map, vTextureCoordMap, uReso, vec2(2.)) + 0.5;

                uv0.x += progress0 * map.r;
                uv1.x -= progress1 * map.r;

                vec4 color = texture2D( texture0, uv0 );
                vec4 color1 = texture2D( texture1, uv1 );

                gl_FragColor = mix(color, color1, progress0 );
            }`;
                class e {
                    constructor(e) {
                        this.canvas = e.canvas, this.webGLCurtain = new Curtains({
                            container: this.canvas,
                            watchScroll: !1,
                            pixelRatio: Math.min(1.5, window.devicePixelRatio)
                        }), this.planeElement = e.planeElement, this.mouse = {
                            x: 0,
                            y: 0
                        }, this.params = {
                            vertexShader: o,
                            fragmentShader: i,
                            widthSegments: 40,
                            heightSegments: 40,
                            uniforms: {
                                time: {
                                    name: "uTime",
                                    type: "1f",
                                    value: 0
                                },
                                mousepos: {
                                    name: "uMouse",
                                    type: "2f",
                                    value: [0, 0]
                                },
                                resolution: {
                                    name: "uReso",
                                    type: "2f",
                                    value: [innerWidth, innerHeight]
                                },
                                progress: {
                                    name: "uProgress",
                                    type: "1f",
                                    value: 0
                                }
                            }
                        }, this.initPlane()
                    }
                    initPlane() {
                        this.plane = this.webGLCurtain.addPlane(this.planeElement, this.params), this.plane && this.plane.onReady(() => {
                            this.update(), this.initEvent()
                        })
                    }
                    update() {
                        this.plane.onRender(() => {
                            this.plane.uniforms.time.value += .01, this.plane.uniforms.resolution.value = [innerWidth, innerHeight]
                        })
                    }
                    initEvent() {
                        this.planeElement.addEventListener("mouseenter", e => {
                            gsap.to(this.plane.uniforms.progress, .8, {
                                value: 1
                            })
                        }), this.planeElement.addEventListener("mouseout", e => {
                            gsap.to(this.plane.uniforms.progress, .8, {
                                value: 0
                            })
                        })
                    }
                }
                n = `#ifdef GL_ES
            precision mediump float;
            #endif

            attribute vec3 aVertexPosition;
            attribute vec2 aTextureCoord;

            uniform mat4 uMVMatrix;
            uniform mat4 uPMatrix;

            varying vec2 vTextureCoord;

            void main() {
                gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);

                vTextureCoord = aTextureCoord;
            }`, s = `
            #ifdef GL_ES
            precision mediump float;
            #endif

            varying vec3 vVertexPosition;
            varying vec2 vTextureCoord;

            uniform float uTime;

            uniform sampler2D planeTexture;

            void main() {
                vec2 textureCoord = vTextureCoord;

                const float PI = 3.141592;

                textureCoord.x += (
                sin(textureCoord.x * 2.5 + ((uTime * (PI / 3.0)) * 0.031))
                + sin(textureCoord.y * 2.5 + ((uTime * (PI / 2.489)) * 0.017))
                ) * 0.0075;

                textureCoord.y += (
                sin(textureCoord.y * 2.5 + ((uTime * (PI / 2.023)) * 0.023))
                + sin(textureCoord.x * 2.5 + ((uTime * (PI / 3.1254)) * 0.037))
                ) * 0.0125;

                gl_FragColor = texture2D(planeTexture, textureCoord);
            }
            `;
                class a {
                    constructor(e) {
                        this.canvas = e.canvas, this.webGLCurtain = new Curtains({
                            container: this.canvas,
                            watchScroll: !1,
                            pixelRatio: Math.min(1.5, window.devicePixelRatio)
                        }), this.planeElement = e.planeElement, this.mouse = {
                            x: 0,
                            y: 0
                        }, this.params = {
                            vertexShader: n,
                            fragmentShader: s,
                            widthSegments: 40,
                            heightSegments: 40,
                            uniforms: {
                                time: {
                                    name: "uTime",
                                    type: "1f",
                                    value: 0
                                },
                                mousepos: {
                                    name: "uMouse",
                                    type: "2f",
                                    value: [0, 0]
                                },
                                resolution: {
                                    name: "uReso",
                                    type: "2f",
                                    value: [innerWidth, innerHeight]
                                },
                                progress: {
                                    name: "uProgress",
                                    type: "1f",
                                    value: 0
                                }
                            }
                        }, this.initPlane()
                    }
                    initPlane() {
                        this.plane = this.webGLCurtain.addPlane(this.planeElement, this.params), this.plane && this.plane.onReady(() => {
                            this.update(), this.initEvent()
                        })
                    }
                    update() {
                        this.plane.onRender(() => {
                            this.plane.uniforms.resolution.value = [innerWidth, innerHeight]
                        })
                    }
                    initEvent() {
                        let e = !1;
                        this.planeElement.addEventListener("mouseenter", t => {
                            e = !0
                        }), this.planeElement.addEventListener("mouseout", t => {
                            e = !1
                        }), this.plane.onRender(() => {
                            e && this.plane.uniforms.time.value++
                        })
                    }
                }
                const r = `
            precision mediump float;

            attribute vec3 aVertexPosition;
            attribute vec2 aTextureCoord;

            uniform mat4 uMVMatrix;
            uniform mat4 uPMatrix;

            varying vec3 vVertexPosition;
            varying vec2 vTextureCoord;

            uniform float uTime;

            void main() {
                vec3 vertexPosition = aVertexPosition;

                float waveCoords = ((uTime / 45.0) * 3.5) - 1.75;

                float distanceToWave = distance(vec2(vertexPosition.x, 0.0), vec2(waveCoords, 0.0));

                vertexPosition.z -= (cos(clamp(distanceToWave, 0.0, 0.75) * 3.141592) - cos(0.75 * 3.141592) + (2.0 * sin(3.141592 * uTime / 90.0))) * 0.025;

                gl_Position = uPMatrix * uMVMatrix * vec4(vertexPosition, 1.0);

                vTextureCoord = aTextureCoord;
                vVertexPosition = vertexPosition;
            }
            `,
                    c = `precision mediump float;

            uniform float uTime;

            varying vec3 vVertexPosition;
            varying vec2 vTextureCoord;

            uniform sampler2D uExample;


            void main() {

                vec2 textureCoords = vec2(vTextureCoord.x, vTextureCoord.y);
                vec4 finalColor = texture2D(uExample, textureCoords);

                gl_FragColor = finalColor;
            }`;
                class l {
                    constructor(e) {
                        this.canvas = e.canvas, this.webGLCurtain = new Curtains({
                            container: this.canvas,
                            watchScroll: !1,
                            pixelRatio: Math.min(1.5, window.devicePixelRatio)
                        }), this.planeElement = e.planeElement, this.mouse = {
                            x: 0,
                            y: 0
                        }, this.params = {
                            vertexShader: r,
                            fragmentShader: c,
                            widthSegments: 40,
                            heightSegments: 40,
                            uniforms: {
                                time: {
                                    name: "uTime",
                                    type: "1f",
                                    value: 0
                                },
                                resolution: {
                                    name: "uReso",
                                    type: "2f",
                                    value: [innerWidth, innerHeight]
                                }
                            }
                        }, this.initPlane()
                    }
                    initPlane() {
                        this.plane = this.webGLCurtain.addPlane(this.planeElement, this.params), this.plane && this.plane.onReady(() => {
                            this.update(), this.initEvent()
                        })
                    }
                    update() {
                        this.plane.onRender(() => {
                            this.plane.uniforms.time.value += .01, this.plane.uniforms.resolution.value = [innerWidth, innerHeight]
                        })
                    }
                    initEvent() {
                        let e = !1;
                        this.planeElement.addEventListener("mouseenter", t => {
                            e = !0
                        }), this.planeElement.addEventListener("mouseout", t => {
                            e = !1
                        }), this.plane.onRender(() => {
                            e ? this.plane.uniforms.time.value += (45 - this.plane.uniforms.time.value) * .0375 : this.plane.uniforms.time.value += (0 - this.plane.uniforms.time.value) * .0375
                        })
                    }
                }
                t(window).on("scroll", function() {
                    (navigator.userAgent.indexOf("Safari") == -1 || navigator.userAgent.indexOf("Chrome") > -1) && (t(".pxl-image-box1.normal, .pxl-image-box3, .pxl-meta-box2").each(function() {
                        const n = t(this),
                            s = n.find(".canvas")[0],
                            o = n.find(".item--image")[0],
                            i = n.data("initialized");
                        !i && s && o && (new e({
                            canvas: s,
                            planeElement: o
                        }), n.data("initialized", !0))
                    }), t(".pxl-image-box1.expo").each(function() {
                        const e = t(this),
                            n = e.find(".canvas")[0],
                            s = e.find(".item--image")[0],
                            o = e.data("initialized");
                        !o && n && s && (new a({
                            canvas: n,
                            planeElement: s
                        }), e.data("initialized", !0))
                    }), t(".pxl-image-box1.wave").each(function() {
                        const e = t(this),
                            n = e.find(".canvas")[0],
                            s = e.find(".item--image")[0],
                            o = e.data("initialized");
                        !o && n && s && (new l({
                            canvas: n,
                            planeElement: s
                        }), e.data("initialized", !0))
                    })), /^((?!chrome|android).)*safari/i.test(navigator.userAgent) && t(".pxl-image-box1 .image-front, .pxl-image-box3 .image-front").css("opacity", "1")
                })
            }
            e.find(".pxl-image-box2").each(function() {
                var s, o, a, r, l, e = t(this),
                    n = e.find(".item--text"),
                    d = e.find(".item--text div"),
                    i = e.find(".item--image");
                c(n), s = e.find(".item--text div"), a = 360 / s.length, o = 1, s.each(function(e, n) {
                    var s = a * o;
                    t(n).css("transform", "translate(-50%,-95%) rotate(" + s + "deg)"), o++
                });

                function c(e) {
                    if (t(e).length > 0) {
                        var n = t(e);
                        n.each(function(e, n) {
                            for (var s = "", o = 0; o < n.innerText.length; o++) n.innerText[o] == " " ? s += "<div>&nbsp;</div>" : s += "<div>" + n.innerText[o] + "</div>";
                            s += "<div>&nbsp;</div>", t(n).html(s)
                        })
                    }
                }
                l = new TimelineMax, n.mouseenter(function() {
                    gsap.to(i, 2, {
                        rotation: 360,
                        scale: 1.3,
                        ease: Elastic.easeOut.config(1, 1)
                    }), gsap.to(e.find(".item--text div"), .5, {
                        scale: 1.5,
                        ease: Elastic.easeInOut.config(1, 1)
                    })
                }), e.find(".item--text").mouseleave(function() {
                    gsap.to(i, 2, {
                        rotation: 0,
                        scale: 1,
                        ease: Elastic.easeOut.config(1, 1)
                    }), gsap.to(e.find(".item--text div"), .5, {
                        scale: 1,
                        ease: Elastic.easeInOut.config(1, 1)
                    })
                }), r = new TimelineMax({
                    repeat: -1
                }), r.to(n, 10, {
                    rotate: 360,
                    ease: Power0.easeNone
                })
            })
        };
    e(window).on("elementor/frontend/init", function() {
        elementorFrontend.hooks.addAction("frontend/element_ready/pxl_image.default", t), elementorFrontend.hooks.addAction("frontend/element_ready/pxl_showcase.default", t), elementorFrontend.hooks.addAction("frontend/element_ready/pxl_button.default", o), elementorFrontend.hooks.addAction("frontend/element_ready/pxl_meta_box.default", s), elementorFrontend.hooks.addAction("frontend/element_ready/pxl_heading.default", n), elementorFrontend.hooks.addAction("frontend/element_ready/pxl_text_editor.default", n), elementorFrontend.hooks.addAction("frontend/element_ready/pxl_image_box.default", i)
    })
})(jQuery)