(function(e) {
    e(window).on("elementor/frontend/init", function() {
        const e = ["pxl_post_carousel", "pxl_slider_carousel", "pxl_gallery_carousel", "pxl_testimonial_carousel", "pxl_team_carousel"];
        e.forEach(e => {
            elementorFrontend.hooks.addAction(`frontend/element_ready/${e}.default`, n)
        })
    });

    function n(n) {
        n.find(".pxl-swiper-sliders").each(function() {
            var h, u = e(this),
                l = u.find(".pxl-swiper-container").data().settings,
                m = u.find(".pxl-swiper-slide").length,
                d = {
                    direction: l.slide_direction,
                    effect: l.slide_mode,
                    wrapperClass: "pxl-swiper-wrapper",
                    slideClass: "pxl-swiper-slide",
                    slidesPerView: l.slides_to_show,
                    slidesPerGroup: l.slides_to_scroll,
                    slidesPerColumn: l.slide_percolumn,
                    spaceBetween: 0,
                    observer: !0,
                    observeParents: !0,
                    navigation: {
                        nextEl: u.find(".pxl-swiper-arrow-next")[0],
                        prevEl: u.find(".pxl-swiper-arrow-prev")[0]
                    },
                    pagination: {
                        type: l.pagination_type,
                        el: u.find(".pxl-swiper-dots")[0],
                        clickable: !0,
                        modifierClass: "pxl-swiper-pagination-",
                        bulletClass: "pxl-swiper-pagination-bullet",
                        renderCustom: function(e, t, n, s) {
                            return n + " of " + s
                        }
                    },
                    speed: l.speed,
                    watchSlidesProgress: !0,
                    watchSlidesVisibility: !0,
                    breakpoints: {
                        0: {
                            slidesPerView: l.slides_to_show_xs,
                            slidesPerGroup: l.slides_to_scroll
                        },
                        576: {
                            slidesPerView: l.slides_to_show_sm,
                            slidesPerGroup: l.slides_to_scroll
                        },
                        768: {
                            slidesPerView: l.slides_to_show_md,
                            slidesPerGroup: l.slides_to_scroll
                        },
                        992: {
                            slidesPerView: l.slides_to_show_lg,
                            slidesPerGroup: l.slides_to_scroll
                        },
                        1200: {
                            slidesPerView: l.slides_to_show,
                            slidesPerGroup: l.slides_to_scroll
                        },
                        1400: {
                            slidesPerView: l.slides_to_show_xxl,
                            slidesPerGroup: l.slides_to_scroll
                        }
                    },
                    on: {
                        slideChangeTransitionStart: function() {
                            t(this)
                        },
                        slideChange: function() {
                            t(this)
                        },
                        sliderMove: function() {
                            t(this)
                        }
                    }
                };
            l.center === "true" && (m % 2 === 0 ? d.centeredSlides = !1 : (d.centeredSlides = !0, d.initialSlide = Math.floor(m / 2))), (l.loop || l.loop === "true") && (d.loop = !0), l.autoplay || l.autoplay === "true" ? d.autoplay = {
                delay: l.delay,
                disableOnInteraction: l.pause_on_interaction
            } : d.autoplay = !1, l.slide_mode === "coverflow" && (d.centeredSlides = !0, u.hasClass("pxl-gallery-carousel4") && u.hasClass("style2") ? (d.coverflowEffect = {
                rotate: 50,
                stretch: l.stretch_cover || 0,
                depth: 100,
                modifier: 1,
                slideShadows: !1
            }, d.grabCursor = !0, d.centeredSlides = !0, d.slidesPerView = "auto", d.loop = !0) : d.coverflowEffect = {
                rotate: 0,
                stretch: l.stretch_cover || 0,
                depth: 120,
                modifier: 3,
                slideShadows: !1
            }), l.parallax === "true" && (d.parallax = !0), l.slide_mode === "fade" && (d.fadeEffect = {
                crossFade: !0
            }), l.slide_mode === "cards" && l.cards_style === "card1" && (d.cardsEffect = {
                slideShadows: !1,
                perSlideRotate: 2,
                perSlideOffset: 8
            }), l.slide_mode === "cards" && l.cards_style === "card3" && (d.cardsEffect = {
                slideShadows: !1,
                perSlideRotate: 1,
                perSlideOffset: 1
            }, d.grabCursor = !0), l.slide_mode === "cards" && l.cards_style === "card2" && (d.cardsEffect = {
                slideShadows: !1,
                perSlideOffset: 5.5,
                perSlideRotate: 0
            }), l.slide_mode === "cube" && (d.cubeEffect = {
                grabCursor: !0,
                shadow: !1,
                slideShadows: !1,
                shadowOffset: 20,
                shadowScale: .94
            }), l.slide_mode === "creative" && (d.creativeEffect = {
                prev: {
                    translate: [0, 0, -400]
                },
                next: {
                    translate: ["100%", 0, 0]
                }
            }, d.on = {
                init: function() {
                    var t = e("[data-swiper-slide-index=" + this.realIndex + "]").find("video");
                    t.length && t.trigger("play")
                }
            }), l.reverse === "true" && (d.autoplay.reverseDirection = !0), u.hasClass("pxl-gallery-carousel5") && (d.slidesPerView = "auto", d.autoplay = {
                delay: 0
            }, l.reverse === "true" && (d.autoplay.reverseDirection = !0)), s(l, d), u.find(".pxl-swiper-thumbs").length > 0 && o(u, d), h = new Swiper(u.find(".pxl-swiper-container")[0], d), h.on("slideChange", function() {
                if (e(window).width() > 991) {
                    var n, s, o, i, a, c, r = this,
                        t = e(u);
                    t.hasClass("pxl-slider-carousel6") && (n = r.activeIndex, t.find(".pxl-swiper-slide").css("width", ""), t.find(".pxl-swiper-slide").eq(n).css("width", "67%"), t.find(".pxl-swiper-slide").not(":eq(" + n + ")").css("width", "32%"), o = 0, t.find(".pxl-swiper-slide").each(function(t) {
                        t >= n && t < n + 3 && (o += e(this).outerWidth(!0))
                    }), i = t.find(".pxl-swiper-container").width(), c = t.find(".pxl-swiper-slide.swiper-slide-active").outerWidth(!0), s = (i - o + c) / 2, r.previousIndex > n && (s = i - o + t.find(".pxl-swiper-slide").eq(n).outerWidth(!0)), a = 0, t.find(".pxl-swiper-slide").each(function(t) {
                        t < n && (a += e(this).outerWidth(!0))
                    }), s -= a, n === 0 && (s = 0), t.find(".pxl-swiper-wrapper").css({
                        transform: "translate3d(" + s + "px, 0, 0)"
                    }))
                }
            }), l.autoplay === "true" && l.pause_on_hover === "true" && e(u.find(".pxl-swiper-container")).on({
                mouseenter: function() {
                    this.swiper.autoplay.stop()
                },
                mouseleave: function() {
                    this.swiper.autoplay.start()
                }
            }), n.find(".pxl-slider-carousel-effect").length > 0 && window.innerWidth > 767 && i(n, h, l), a(), n.find("[data-fancybox='gallery']").fancybox({
                buttons: ["slideShow", "share", "zoom", "fullScreen", "close"],
                loop: !0
            })
        }), c(), r(), n.find(".pxl-service-carousel").length > 0 && l()
    }

    function t(t) {
        var n = t.activeIndex;
        e(t.slides).each(function(t) {
            var s = e(this).find(".wow");
            t === n ? s.removeClass("pxl-invisible").addClass("animated") : s.removeClass("animated").addClass("pxl-invisible"), e(this).removeClass("swiper-slide-prev swiper-slide-next swiper-slide-prev-prev swiper-slide-next-next"), t === n - 1 || t === n + 1 ? e(this).addClass("swiper-slide-prev swiper-slide-next") : (t === n - 2 || t === n + 2) && e(this).addClass("swiper-slide-prev-prev swiper-slide-next-next")
        })
    }

    function s(e, t) {
        e["creative-effect"] === "effect1" ? t.creativeEffect = {
            prev: {
                shadow: !0,
                origin: "left center",
                translate: ["-5%", 0, -200],
                rotate: [0, 100, 0]
            },
            next: {
                origin: "right center",
                translate: ["5%", 0, -200],
                rotate: [0, -100, 0]
            }
        } : e["creative-effect"] === "effect2" ? t.creativeEffect = {
            prev: {
                shadow: !0,
                translate: [0, 0, -400]
            },
            next: {
                translate: ["100%", 0, 0]
            }
        } : e["creative-effect"] === "effect3" && (t.creativeEffect = {
            prev: {
                opacity: 0
            },
            next: {
                opacity: 0
            }
        })
    }

    function o(t, n) {
        var o, i, a, s = t.find(".pxl-swiper-thumbs");
        if (s.length === 0) {
            console.warn("Thumbnail element not found.");
            return
        }
        if (i = s.data().settings || {}, a = e.extend({
                effect: "slide",
                direction: "horizontal",
                spaceBetween: 5,
                slidesPerView: 6,
                centeredSlides: !1,
                loop: !0,
                watchSlidesProgress: !0,
                slideToClickedSlide: !0,
                breakpoints: {
                    320: {
                        slidesPerView: 1,
                        spaceBetween: 5
                    },
                    480: {
                        slidesPerView: 1,
                        spaceBetween: 10
                    },
                    640: {
                        slidesPerView: 2,
                        spaceBetween: 10
                    },
                    768: {
                        slidesPerView: 3,
                        spaceBetween: 10
                    },
                    1024: {
                        slidesPerView: 4,
                        spaceBetween: 10
                    },
                    1200: {
                        slidesPerView: 4,
                        spaceBetween: 10
                    },
                    1600: {
                        slidesPerView: 6,
                        spaceBetween: 10
                    }
                }
            }, i), o = new Swiper(s[0], a), !o) {
            console.error("Failed to initialize thumbnail Swiper.");
            return
        }
        n.thumbs = {
            swiper: o
        }
    }

    function i(t, n, s) {
        var o = t.find(".pxl-slider-carousel-effect");
        o.each(function() {
            const a = e(this);
            var A = `
        varying vec2 vUv;
        void main() {
            vUv = uv;
            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
        }
        `,
                E = `
        varying vec2 vUv;
        uniform sampler2D currentImage;
        uniform sampler2D nextImage;
        uniform sampler2D disp;
        uniform float dispFactor;
        float intensity = 0.25;
        void main() {
            vec2 uv = vUv;
            vec4 disp = texture2D(disp, uv);
            vec2 distortedPosition = vec2(uv.x + dispFactor * (disp.r * intensity), uv.y);
            vec2 distortedPosition2 = vec2(uv.x - (1.0 - dispFactor) * (disp.r * intensity), uv.y);
            vec4 _currentImage = texture2D(currentImage, distortedPosition);
            vec4 _nextImage = texture2D(nextImage, distortedPosition2);
            vec4 finalTexture = mix(_currentImage, _nextImage, dispFactor);
            gl_FragColor = finalTexture;
        }
        `;
            let v = new THREE.Scene,
                w = Array.from(a.find(".item--featured img"));
            const l = [];
            let h = a.find(".item--featured img").width(),
                p = a.find(".item--featured img").height(),
                c = h * window.devicePixelRatio,
                d = p * window.devicePixelRatio,
                T = e(window).height() / h,
                F = t.find(".pxl-slider-carousel10").length,
                M = t.find(".pxl-slider-carousel2").length,
                k = t.find(".pxl-slider-carousel8").length;

            function x(e, t, n) {
                let s = 0;
                F > 0 ? window.innerHeight < 767 ? s = 1.4 : window.innerWidth < 1200 ? s = 1.3 : s = 1.7 : M > 0 ? s = window.innerWidth < 1200 ? 1 : 1.5 : k > 0 ? s = window.innerWidth < 1200 ? 1 : 1.3 : s = window.innerWidth < 1200 ? 1.5 : 2;
                let o = e / t * n * s;
                return o
            }
            let O = x(c, d, T);
            const u = new THREE.PerspectiveCamera(55, O, 1, 100);
            u.position.z = 1;
            let r = new THREE.WebGLRenderer({
                antialias: !0
            });
            r.setPixelRatio(window.devicePixelRatio), r.setClearColor(2303786, 1), r.setSize(c, d), a.append(r.domElement);
            let g = new THREE.TextureLoader;
            g.crossOrigin = "anonymous", w.forEach(function(t) {
                let n = g.load(e(t).attr("src"));
                n.magFilter = n.minFilter = THREE.LinearFilter, n.anisotropy = r.capabilities.getMaxAnisotropy(), l.push(n)
            });
            let _ = a.find(".pxl-image-webgl"),
                C = _.attr("src"),
                m = g.load(C);
            m.wrapS = m.wrapT = THREE.RepeatWrapping;
            let y = 0;
            s.loop === "true" && (y = 1);
            let i = new THREE.ShaderMaterial({
                    uniforms: {
                        dispFactor: {
                            type: "f",
                            value: 0
                        },
                        currentImage: {
                            type: "t",
                            value: l[y]
                        },
                        nextImage: {
                            type: "t",
                            value: l[1]
                        },
                        disp: {
                            type: "t",
                            value: m
                        }
                    },
                    vertexShader: A,
                    fragmentShader: E,
                    transparent: !0,
                    opacity: 1
                }),
                S = new THREE.PlaneBufferGeometry(2.4, 1.16),
                j = new THREE.Mesh(S, i);
            j.position.set(0, 0, 0), v.add(j), e(window).resize(function() {
                h = a.find(".item--featured img").width(), p = a.find(".item--featured img").height(), c = h * window.devicePixelRatio, d = p * window.devicePixelRatio, r.setSize(c, d), u.aspect = c / d, u.updateProjectionMatrix()
            });
            let b = () => {
                requestAnimationFrame(b), r.render(v, u)
            };
            b();
            let f = 0;
            const z = () => {
                i.uniforms.nextImage.value = l[f], i.uniforms.nextImage.needsUpdate = !0, TweenLite.to(i.uniforms.dispFactor, 1, {
                    value: 1,
                    ease: "Sine.easeInOut",
                    onComplete: () => {
                        i.uniforms.currentImage.value = l[f], i.uniforms.currentImage.needsUpdate = !0, i.uniforms.dispFactor.value = 0
                    }
                })
            };
            n.on("slideChange", function() {
                f = this.activeIndex, z()
            }), n.on("slideChangeTransitionStart", function() {
                n.allowTouchMove = !1, o.addClass("pxl-pointerev-none")
            }), n.on("slideChangeTransitionEnd", function() {
                setTimeout(function() {
                    n.allowTouchMove = !0, o.removeClass("pxl-pointerev-none")
                }, 0)
            })
        })
    }

    function a() {
        e(".pxl-navigation-carousel").parents(".elementor-section").addClass("pxl--hide-arrow"), setTimeout(function() {
            e(".pxl-navigation-carousel .pxl-navigation-arrow-prev").on("click", function() {
                e(this).parents(".elementor-section").find(".pxl-swiper-arrow.pxl-swiper-arrow-prev").trigger("click")
            }), e(".pxl-navigation-carousel .pxl-navigation-arrow-next").on("click", function() {
                e(this).parents(".elementor-section").find(".pxl-swiper-arrow.pxl-swiper-arrow-next").trigger("click")
            })
        }, 300)
    }

    function r() {
        var t = e(".pxl-slider-carousel2").css("padding-top"),
            n = e(".pxl-slider-carousel2").css("padding-right");
        e(".pxl-slider-carousel2 canvas").css("top", t), e(".pxl-slider-carousel2 canvas").css("right", n)
    }

    function c() {
        var t = e(window).width();
        e(".swiper-vertical").each(function() {
            var n = 0;
            e(this).find(".pxl-swiper-slide.swiper-slide-visible").each(function() {
                var o, i, s = 0;
                t <= 1199 ? e(this).find(".pxl-item--inner").each(function() {
                    var t = parseInt(e(this).outerHeight()) || 0;
                    s += t
                }) : e(this).find(".pxl-item--inner img").each(function() {
                    var t = parseInt(e(this).attr("height")) || 0;
                    s += t
                }), o = parseInt(e(this).css("padding-top")) || 0, i = parseInt(e(this).css("padding-bottom")) || 0, s += o + i, n += s
            }), e(this).height(n + "px")
        })
    }

    function l() {
        e(".pxl-service-carousel1 .item--icon img").each(function() {
            var e = jQuery(this),
                t = e.attr("id"),
                n = e.attr("class"),
                s = e.attr("src");
            s && setTimeout(function() {
                jQuery.get(s, function(s) {
                    var o = jQuery(s).find("svg");
                    t && o.attr("id", t), n && o.attr("class", n + " replaced-svg"), o.removeAttr("xmlns:a"), !o.attr("viewBox") && o.attr("height") && o.attr("width") && o.attr("viewBox", "0 0 24 24"), e.replaceWith(o)
                }, "xml")
            }, 500)
        })
    }
})(jQuery)